var app=function(){"use strict";function t(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var e,s={};var a=function(){if(e)return s;e=1;const t={async fetchStaff(){try{const t=await fetch("/src/data/staff.json");if(!t.ok)throw new Error("Failed to fetch staff");return await t.json()}catch(t){return console.error("Error fetching staff:",t),[]}},async fetchBuildings(){try{const t=await fetch("/src/data/buildings.json");if(!t.ok)throw new Error("Failed to fetch buildings");return await t.json()}catch(t){return console.error("Error fetching buildings:",t),[]}},async fetchDepartments(){try{const t=await fetch("/src/data/departments.json");if(!t.ok)throw new Error("Failed to fetch departments");return await t.json()}catch(t){return console.error("Error fetching departments:",t),[]}},async fetchJobTypes(){try{const t=await fetch("/src/data/jobTypes.json");if(!t.ok)throw new Error("Failed to fetch job types");return await t.json()}catch(t){return console.error("Error fetching job types:",t),[]}},async fetchJobCategories(){try{const t=await fetch("/src/data/jobCategories.json");if(!t.ok)throw new Error("Failed to fetch job categories");return await t.json()}catch(t){return console.error("Error fetching job categories:",t),[]}},getTasks:()=>JSON.parse(localStorage.getItem("porter_tasks")||"[]"),saveTask(t){const e=this.getTasks();return t.id=Date.now(),e.push(t),localStorage.setItem("porter_tasks",JSON.stringify(e)),t},updateTask(t,e){const s=this.getTasks(),a=s.findIndex((e=>e.id===t));return-1!==a?(s[a]={...s[a],...e},localStorage.setItem("porter_tasks",JSON.stringify(s)),s[a]):null},deleteTask(t){const e=this.getTasks().filter((e=>e.id!==t));return localStorage.setItem("porter_tasks",JSON.stringify(e)),t},getArchivedShifts:()=>JSON.parse(localStorage.getItem("porter_archived_shifts")||"[]"),saveArchivedShift(t){const e=this.getArchivedShifts();return e.push(t),localStorage.setItem("porter_archived_shifts",JSON.stringify(e)),t}},a={data:{staff:[],buildings:[],departments:[],jobTypes:[],jobCategories:[],tasks:[]},settings:{dayShiftStart:"08:00",dayShiftEnd:"20:00",nightShiftStart:"20:00",nightShiftEnd:"08:00"},currentDate:new Date,currentShift:"day",async init(){try{await this.loadAllData();const e=new Date;this.currentDate=e;const s=e.getHours(),a=e.getMinutes(),r=`${s.toString().padStart(2,"0")}:${a.toString().padStart(2,"0")}`;return this.isTimeBetween(r,this.settings.dayShiftStart,this.settings.dayShiftEnd)?this.currentShift="day":this.currentShift="night",this.data.tasks=t.getTasks(),this.initCommonElements(),!0}catch(t){return console.error("Error initializing app:",t),!1}},async loadAllData(){try{const[e,s,a,r,i]=await Promise.all([t.fetchStaff(),t.fetchBuildings(),t.fetchDepartments(),t.fetchJobTypes(),t.fetchJobCategories()]);return this.data.staff=e,this.data.buildings=s,this.data.departments=a,this.data.jobTypes=r,this.data.jobCategories=i,!0}catch(t){return console.error("Error loading data:",t),!1}},initCommonElements(){const t=document.querySelectorAll("#current-date");if(t.length){const e=this.formatDateForInput(this.currentDate);t.forEach((t=>{t.value=e,t.addEventListener("change",(t=>{this.currentDate=new Date(t.target.value),this.saveState()}))}))}const e=document.querySelectorAll(".shift-btn");e.length&&e.forEach((t=>{t.dataset.shift===this.currentShift?t.classList.add("active"):t.classList.remove("active"),t.addEventListener("click",(s=>{e.forEach((t=>t.classList.remove("active"))),t.classList.add("active"),this.currentShift=t.dataset.shift,this.saveState()}))})),this.updateShiftDisplays(),this.setupNavigationButtons()},updateShiftDisplays(){const t=document.querySelectorAll("#current-date-display");if(t.length){const e=this.formatDate(this.currentDate);t.forEach((t=>{t.textContent=`Date: ${e}`}))}const e=document.querySelectorAll("#current-shift-display");if(e.length){const t="day"===this.currentShift?`Day Shift (${this.settings.dayShiftStart} - ${this.settings.dayShiftEnd})`:`Night Shift (${this.settings.nightShiftStart} - ${this.settings.nightShiftEnd})`;e.forEach((e=>{e.textContent=`Shift: ${t}`}))}},setupNavigationButtons(){const t=document.getElementById("new-task-btn");t&&t.addEventListener("click",(()=>{window.location.href="/new-task"}));const e=document.getElementById("pending-tasks-btn");e&&e.addEventListener("click",(()=>{window.location.href="/pending-tasks"}));const s=document.getElementById("completed-tasks-btn");s&&s.addEventListener("click",(()=>{window.location.href="/completed-tasks"}));const a=document.getElementById("shift-complete-btn");a&&a.addEventListener("click",(()=>{confirm("Are you sure you want to complete this shift? This will archive all current tasks.")&&(this.completeShift(),window.location.href="/shift-report")}))},formatDate:t=>t.toLocaleDateString("en-GB",{year:"numeric",month:"long",day:"numeric"}),formatDateForInput:t=>t.toISOString().split("T")[0],formatTime:t=>t,isTimeBetween:(t,e,s)=>e<s?t>=e&&t<s:t>=e||t<s,saveState(){localStorage.setItem("porter_current_date",this.formatDateForInput(this.currentDate)),localStorage.setItem("porter_current_shift",this.currentShift),localStorage.setItem("porter_tasks",JSON.stringify(this.data.tasks)),this.updateShiftDisplays()},loadState(){const t=localStorage.getItem("porter_current_date");t&&(this.currentDate=new Date(t));const e=localStorage.getItem("porter_current_shift");e&&(this.currentShift=e),this.updateShiftDisplays()},addTask(e){e.date=this.formatDateForInput(this.currentDate),e.shift=this.currentShift;const s=t.saveTask(e);return this.data.tasks=t.getTasks(),s},updateTask(e,s){const a=t.updateTask(e,s);return this.data.tasks=t.getTasks(),a},deleteTask(e){return t.deleteTask(e),this.data.tasks=t.getTasks(),!0},completeShift(){const e={date:this.formatDateForInput(this.currentDate),shift:this.currentShift,shiftStart:"day"===this.currentShift?this.settings.dayShiftStart:this.settings.nightShiftStart,shiftEnd:"day"===this.currentShift?this.settings.dayShiftEnd:this.settings.nightShiftEnd,tasks:[...this.data.tasks],archivedAt:(new Date).toISOString()};return t.saveArchivedShift(e),this.data.tasks.forEach((e=>{t.deleteTask(e.id)})),this.data.tasks=[],e},getCurrentShiftTasks(){const t=this.formatDateForInput(this.currentDate);return this.data.tasks.filter((e=>e.date===t&&e.shift===this.currentShift))},getPendingTasks(){return this.getCurrentShiftTasks().filter((t=>"pending"===t.status))},getCompletedTasks(){return this.getCurrentShiftTasks().filter((t=>"completed"===t.status))},getDepartmentName(t){const e=this.data.departments.find((e=>e.id===t));return e?e.name:"Unknown Department"},getJobTypeName(t){const e=this.data.jobTypes.find((e=>e.id===t));return e?e.name:"Unknown Type"},getJobCategoryName(t){const e=this.data.jobCategories.find((e=>e.id===t));return e?e.name:"Unknown Category"},getStaffName(t){const e=this.data.staff.find((e=>e.id===t));return e?e.name:"Unassigned"},searchStaffByName(t){if(!t||t.length<2)return[];const e=t.toLowerCase();return this.data.staff.filter((t=>t.name.toLowerCase().includes(e)))}};return document.addEventListener("DOMContentLoaded",(()=>{a.init().then((()=>{a.loadState(),"function"==typeof initPage&&initPage()}))})),s}();return t(a)}();