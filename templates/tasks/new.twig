{% extends "_layout.twig" %}

{% block title %}New Task - Porter Task Management{% endblock %}

{% block content %}
<div class="task-screen">
    <div class="screen-header">
        <div class="header-info">
            <h2>New Task</h2>
            <div class="shift-info">{{ now|date('l, F j, Y') }} | 
              {% if craft.app.request.getParam('shift') == 'day' %}
                08:00 - 20:00
              {% else %}
                20:00 - 08:00
              {% endif %}
            </div>
        </div>
        <a href="{{ url('shift/' ~ craft.app.request.getParam('shift', 'day')) }}" class="btn btn-secondary">Back</a>
    </div>
    
    <form id="task-form" class="task-form" method="post">
        {{ csrfInput() }}
        <input type="hidden" name="action" value="entries/save-entry">
        <input type="hidden" name="sectionId" value="{{ craft.app.sections.getSectionByHandle('tasks').id ?? '' }}">
        <input type="hidden" name="typeId" value="{{ craft.app.sections.getEntryTypesByHandle('tasks')[0].id ?? '' }}">
        <input type="hidden" name="enabled" value="1">
        <input type="hidden" name="title" value="Task {{ now|date('Y-m-d H:i:s') }}">
        <input type="hidden" name="fields[fd_status]" value="pending" id="status-field">
        <input type="hidden" name="redirect" value="{{ url('tasks/pending', {shift: craft.app.request.getParam('shift', 'day')}) }}">
        
        <!-- Time fields -->
        <label for="time-received">Time Received</label>
        <input type="time" id="time-received" name="fields[fd_time_received]" required>
        
        <label for="time-allocated">Time Allocated</label>
        <input type="time" id="time-allocated" name="fields[fd_time_allocated]">
        
        <!-- Job Category field - spans full width -->
        <label for="job-category" class="form-full-width">Job Category</label>
        <select id="job-category" name="fields[fd_job_category][]" required class="form-full-width">
            <option value="">Select Job Category</option>
            {% for category in craft.entries.section('jobCategories').all() %}
                <option value="{{ category.id }}">{{ category.title }}</option>
            {% endfor %}
        </select>
        
        <!-- Item Type field with flat structure (no visible section labels) -->
        <div id="item-type-row" class="form-full-width">
            <label for="item-type">Item Type</label>
            <select id="item-type" name="fields[fd_itemType]" required>
                <option value="">Select Item Type</option>
                
                <!-- Define section mappings directly in the template -->
                {% set itemTypeSections = {
                    'generalItems': {'categories': ['ad-hoc', 'general items']},
                    'samples': {'categories': ['samples', 'sample transfer']},
                    'gases': {'categories': ['gases']},
                    'assets': {'categories': ['asset movement']},
                    'pathology': {'categories': ['pathology']}
                } %}
                
                <!-- Create a flat list of options with data attributes for filtering -->
                {% for section, info in itemTypeSections %}
                    {% for item in craft.entries.section(section).all() %}
                        <option value="{{ item.id }}" 
                                data-section="{{ section }}" 
                                data-categories="{{ info.categories|join(' ') }}">
                            {{ item.title }}
                        </option>
                    {% endfor %}
                {% endfor %}
            </select>
        </div>

        <!-- Patient Transport row (hidden by default) -->
        <div id="transport-type-row" class="form-full-width" style="display: none;">
            <label for="transport-type">Transport Type</label>
            <select id="transport-type" name="fields[fd_transportType]" required>
                <option value="">Select Transport Type</option>
                {% for item in craft.entries.section('transportOptions').all() %}
                    <option value="{{ item.id }}">{{ item.title }}</option>
                {% endfor %}
            </select>
        </div>
        
        <!-- From Department with data attributes for defaults -->
        <label for="from-department">From Department</label>
        <select id="from-department" name="fields[fd_fromDepartment][]" required>
            <option value="">Select From Department</option>
            {% for department in craft.entries.section('departments').all() %}
                {% set isDefaultFrom = department.title|lower == 'pathology' ? 'pathology' : '' %}
                <option value="{{ department.id }}" data-default-for="{{ isDefaultFrom }}">
                    {{ department.title }}
                </option>
            {% endfor %}
        </select>
        
        <!-- To Department with data attributes for defaults -->
        <label for="to-department">To Department</label>
        <select id="to-department" name="fields[fd_toDepartment][]" required>
            <option value="">Select To Department</option>
            {% for department in craft.entries.section('departments').all() %}
                {% set isDefaultTo = department.title|lower == 'pathology' ? 'samples' : '' %}
                <option value="{{ department.id }}" data-default-for="{{ isDefaultTo }}">
                    {{ department.title }}
                </option>
            {% endfor %}
        </select>
        
        <!-- Staff Member -->
        <label for="staff-member">Staff Member (Optional)</label>
        <select id="staff-member" name="fields[fd_staffMember][]">
            <option value="">Assign to Staff Member</option>
            {% for staff in craft.entries.section('staff').all() %}
                <option value="{{ staff.id }}">{{ staff.title }} {{ staff.fd_surname }}</option>
            {% endfor %}
        </select>
        
        <!-- Time Completed -->
        <label for="time-completed">Time Completed (Optional)</label>
        <input type="time" id="time-completed" name="fields[fd_time_completed]">
        
        <!-- Notes - spans full width -->
        <label for="notes" class="form-full-width">Notes (Optional)</label>
        <textarea id="notes" name="fields[fd_notes]" rows="3" class="form-full-width"></textarea>
        
        <!-- Form Buttons -->
        <div class="form-buttons">
            <button type="button" id="pending-button" class="btn btn-warning">Save as Pending</button>
            <button type="button" id="completed-button" class="btn btn-success">Mark as Completed</button>
        </div>
    </form>
</div>
{% endblock %}

{% block scripts %}
<script src="{{ alias('@web') }}/src/js/app.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const pendingButton = document.getElementById('pending-button');
    const completedButton = document.getElementById('completed-button');
    const statusField = document.getElementById('status-field');
    
    const shiftParam = new URLSearchParams(window.location.search).get('shift') || 'day';
    const redirectField = document.querySelector('input[name="redirect"]');
    
    if (pendingButton) {
        pendingButton.addEventListener('click', function() {
            statusField.value = 'pending';
            if (redirectField) {
                redirectField.value = `/tasks/pending?shift=${shiftParam}`;
            }
            document.getElementById('task-form').submit();
        });
    }
    
    if (completedButton) {
        completedButton.addEventListener('click', function() {
            statusField.value = 'completed';
            if (redirectField) {
                redirectField.value = `/tasks/completed?shift=${shiftParam}`;
            }
            
            // Make sure time completed is filled when marking as completed
            const timeCompletedField = document.getElementById('time-completed');
            if (timeCompletedField && !timeCompletedField.value) {
                const now = new Date();
                const hours = now.getHours().toString().padStart(2, '0');
                const minutes = now.getMinutes().toString().padStart(2, '0');
                timeCompletedField.value = `${hours}:${minutes}`;
            }
            
            document.getElementById('task-form').submit();
        });
    }
});
</script>
{% endblock %}
